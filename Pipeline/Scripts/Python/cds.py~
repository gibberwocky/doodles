#!/usr/bin/python
# IEKNGHER1ujm
# ./cds.py -e VEP.txt -v JFM_AF.vcf -g /save/dwragg/Apis/Apis_mellifera.GCA_000002195.1.25.gtf.clean -o new

import sqlite3,sys, getopt, csv, numpy
from numpy import genfromtxt



BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = range(8)

#following from Python cookbook, #475186
def has_colours(stream):
    if not hasattr(stream, "isatty"):
        return False
    if not stream.isatty():
        return False # auto color only on TTYs
    try:
        import curses
        curses.setupterm()
        return curses.tigetnum("colors") > 2
    except:
        # guess false in case of error
        return False
has_colours = has_colours(sys.stdout)


def printout(text, colour=WHITE):
        if has_colours:
                seq = "\x1b[1;%dm" % (30+colour) + text + "\x1b[0m"
                sys.stdout.write(seq)
        else:
                sys.stdout.write(text)






try:
    myopts, args = getopt.getopt(sys.argv[1:],"e:g:v:o:")
except getopt.GetoptError as e:
    print (str(e))
    print("Usage: %s -e Ensembl VEP output -g Species GTF file -v VCF file -o OUTPUT name" % sys.argv[0])
    sys.exit(2)

for opt, val in myopts:
    if opt == '-e':
        vepfile=val
    elif opt == '-g':
        gtffile=val
    elif opt =='-v' :
        vcffile=val
    elif opt =='-o' :
	outfile=val



printout ("\n=====================================", BLUE)
printout ("\nCDS polymorphism frequency calculator", GREEN)
printout ("\n=====================================", BLUE)

# Connect to database
printout ("\nCreating database : %s" % (outfile+'.db'), RED)
conn = sqlite3.connect(outfile+'.db')
curs = conn.cursor()

try:
        # Create OUTPUT table
        printout ("\nGenerating OUTPUT table", RED)
        curs.execute('DROP TABLE IF EXISTS output')
        curs.execute('CREATE TABLE output (id INTEGER PRIMARY KEY AUTOINCREMENT, gene TEX, chr TEXT, start INT, end INT, cds INT, missense INT, synonymous INT, freqmis REAL, freqsyn REAL, d REAL, snpmis TEXT, snpsyn TEXT) ')
        conn.commit()

	# Populate VEP
	printout ("\nImporting VEP file : %s" % (vepfile), RED )
	curs.execute('DROP TABLE IF EXISTS vep')
	curs.execute('CREATE TABLE vep (id INTEGER PRIMARY KEY AUTOINCREMENT, snp TEXT, pos INTEGER, allele TEXT, gene TEXT, transcript TEXT, feature TEXT, consequence TEXT, U1 TEXT, U2 TEXT, U3 TEXT, U4 TEXT, U5 TEXT, U6 TEXT, Strand TEXT) ')
	conn.commit()
	vep = genfromtxt(vepfile, delimiter='\t', comments="#", dtype='str')
	for row in vep:
		tmp = row
		curs.execute('INSERT INTO vep (SNP, Pos, Allele, Gene, Transcript, Feature, Consequence, U1, U2, U3, U4, U5, U6, Strand) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', row )
	conn.commit()
	curs.execute('DELETE FROM vep WHERE Gene = "-"')
	conn.commit()

	# Count missense variants
	curs.execute('SELECT COUNT (DISTINCT snp) FROM vep WHERE consequence LIKE "%missense%"')
	tmp = curs.fetchall()
	vep_mis = [int(x[0]) for x in tmp][0]

	# Count synonymous variants
        curs.execute('SELECT COUNT (DISTINCT snp) FROM vep WHERE consequence LIKE "%synonymous%"')
        tmp = curs.fetchall()
        vep_syn	= [int(x[0]) for x in tmp][0]



	# Populate GTF
	printout ("\nImporting GTF file : %s" % (gtffile), RED )
	curs.execute('DROP TABLE IF EXISTS gtf')
	curs.execute('CREATE TABLE gtf (id INTEGER PRIMARY KEY AUTOINCREMENT, chr TEXT, type TEXT, feature TEXT, start INTEGER, end INTEGER, strand TEXT, gene TEXT) ')
	conn.commit()
	gtf = genfromtxt(gtffile, delimiter='\t', dtype='str')
	for row in gtf:
		tmp = row
		curs.execute('INSERT INTO gtf (chr, type, feature, start, end, strand, gene) VALUES (?,?,?,?,?,?,?)', row )
	conn.commit()


	# Populate VCF
	printout ("\nImporting VCF file : %s" % (vcffile), RED )
	curs.execute('DROP TABLE IF EXISTS vcf')
	curs.execute('CREATE TABLE vcf (id INTEGER PRIMARY KEY AUTOINCREMENT, chr TEXT, pos INTEGER, snp TEXT, ref TEXT, alt TEXT, freq REAL) ')
	conn.commit()
	vcf = genfromtxt(vcffile, delimiter="\t", dtype='str')
	for row in vcf:
		tmp = row
		curs.execute('INSERT INTO vcf (chr, pos, snp, ref, alt, freq) VALUES (?,?,?,?,?,?)', row )
	conn.commit()

except sqlite3.Error, e:
        if conn:
                conn.rollback()
                print "Error %s:" % e.args[0]
                print tmp
                sys.exit(1)


# Recover CDS SNPs from VEP table
printout ("\nExtracting data and performing analysis", GREEN)
curs.execute('SELECT * FROM vep INNER JOIN vcf ON vep.snp=vcf.snp WHERE vep.consequence LIKE "%missense%" OR vep.consequence LIKE "%synonymous%"')
cds_snps = curs.fetchall()
printout ("\n...%s records identified" % (len(cds_snps)), BLUE)
printout ("\n...%s missense variants" % (vep_mis), BLUE)
printout ("\n...%s synonymous variants" % (vep_syn), BLUE)

# Recover distinct genes
curs.execute('SELECT DISTINCT gene FROM vep WHERE consequence LIKE "%missense%" OR consequence LIKE "%synonymous%"')
gene_unique = curs.fetchall()
printout ("\n...%s distinct genes" % (len(gene_unique)), BLUE)

# Calculte CDS lengths
for row in gene_unique:
	curs.execute('SELECT gene, start, end FROM gtf WHERE gene LIKE (?) AND feature="CDS"', row)
	tmp = curs.fetchall()
	curs.execute('SELECT * FROM gtf WHERE gene LIKE (?)', row)
	tmp_all = curs.fetchall()
	tmp_gene = row[0]
	tmp_chr = min([int(x[1]) for x in tmp_all])
	tmp_start = min([int(x[4]) for x in tmp_all])
	tmp_end = max([int(x[5]) for x in tmp_all]) 
	tmp_cds = int(sum([int(x[2])-int(x[1]) for x in tmp]) + 1)

	curs.execute('SELECT * FROM vep INNER JOIN vcf ON vep.snp=vcf.snp WHERE vep.consequence LIKE "%missense%" AND vep.gene LIKE (?)', row)
	tmp = curs.fetchall()
	tmp_missense = len(tmp)
	tmp_freqmis = float(0)
	tmp_snpmis = ",".join([str(x[1]) for x in tmp])
	if tmp_missense > 0 :
		tmp_freqmis = float(sum([float(x[21]) for x in tmp]) / float(tmp_missense))

	curs.execute('SELECT * FROM vep INNER JOIN vcf ON vep.snp=vcf.snp WHERE vep.consequence LIKE "%synonymous%" AND vep.gene LIKE (?)', row)
	tmp = curs.fetchall()
	tmp_synonymous = len(tmp)
	tmp_freqsyn = float(0)
	tmp_snpsyn = ",".join([str(x[1]) for x in tmp])
	if tmp_synonymous >0 :
		tmp_freqsyn = float(sum([float(x[21]) for x in tmp]) / float(tmp_synonymous))
        
	tmp_d = 0
        tmp_d = float(tmp_freqmis/tmp_cds - tmp_freqsyn/tmp_cds)


	# Write to table
	curs.execute('INSERT INTO output (gene, chr, start, end, cds, missense, synonymous, freqmis, freqsyn, d, snpmis, snpsyn) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)', (tmp_gene, tmp_chr, tmp_start, tmp_end, tmp_cds, tmp_missense, tmp_synonymous, tmp_freqmis, tmp_freqsyn, tmp_d, tmp_snpmis, tmp_snpsyn))
	conn.commit()

# Output to file
printout("\nWriting OUTPUT to : %s\n\n" % (outfile+'.csv'), RED)
curs.execute('SELECT * FROM output')
tmp = curs.fetchall()
with open((outfile+'.csv'), 'wb') as fh:
	writer = csv.writer(fh)
	writer.writerow(['ID', 'GENE', 'CHR', 'START', 'END', 'CDS', 'N_MISSENSE', 'N_SYNON', 'FQ_MISSENSE', 'FQ_SYNON', 'D', 'SNPs_MISSENSE', 'SNPs_SYNON'])
	writer.writerows(tmp)


