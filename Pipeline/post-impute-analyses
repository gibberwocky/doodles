#!/bin/bash
# IEKNGHER1ujm

# =============================================================================
# Genome-wide scans for footprints of natural selection, review points
# =============================================================================
# Population-based

# 1) local reduction in genetic variation 
#	often measured as decrease in heterozygosity in a region
#	positive selection, time-frame less than 200,000 years

# 2) changes in the shape of the frequency distribution of genetic variation
#	relative increase in the proportion of either low- or high-frequency
#		mutations in the selected region
#	positive, balancing selection, time-frame less than 200,000 years

# 3) differentiation between populations (Fst)
#	positive, balancing selection, time-frame less than 80,000 years

# 4) extended LD segments (REHH)
#	positive selection, time-frame less than 30,000 years

# 5) elevated admixture contribution from one populatino
#	positive selection, time-frame less than 500 years


# =============================================================================
# Things left to check from Swedish bee paper
# =============================================================================

# 1) NeEstimator v2 could be used to estimate contemporary effective population
# 	size (Ne) using large number of SNPs (~ 10K). This can then be used to 
#	check the estimated Ne (100K) in the Swedish paper. And subsequently, 
#	can be used to calculate Watterson's estimator (0w) of population
#	mutation rate




# =============================================================================
# Additional thoughts
# =============================================================================

# 1) Hussain suggested PAML for calculating Ka/Ks (Dn/Ds) 
# 2) Structure variation analysis (BreakDancer)

# =============================================================================
# Post-imputation analyses
# =============================================================================

# Set-up
module load bioinfo/bcftools
DUMP="/home/dwragg/work/Analysis"
PIPE="/home/dwragg/work/Pipeline"
PLINK="/usr/local/bioinfo/src/plink/plink-1.90-x86_64"

# Unzip VCF file to work on, fix sample IDs and chromosome names
#FILE=${DUMP}/vcfs/JFM-OTH-Apis/JFM-OTH-BR-Apis
FILEDIR=${DUMP}/vcfs/VCF-SITES
FILE=Amel-test_A

# Merge data prior to analysis
bcftools merge -m snps -O v \
  ${SITES}/HARP_beagle.vcf.gz \
  ${SITES}/JFM-diploid.vcf.gz \
  ${SITES}/OTH-diploid.vcf.gz \
  ${SITES}/BR-diploid.vcf.gz \
  -o ${FILEDIR}/${FILE}.vcf


#gunzip -c ${FILEDIR}/${FILE}.vcf.gz > ${FILEDIR}/${FILE}.vcf
# Replace underscores in sample IDs
sed -i '/^#CHROM/s/_/-/g' ${FILEDIR}/${FILE}.vcf
# Convert chromosome accessions to numbers
${PIPE}/accession-to-chr.sh -i ${FILEDIR}/${FILE}.vcf



# =============================================================================
# PLINK
# =============================================================================

# Make BED file
${PLINK}/plink --vcf ${FILEDIR}/${FILE}.vcf \
  --remove-fam ${FILEDIR}/Wallberg-Domestic \
  --allow-no-sex \
  --allow-extra-chr \
  --chr-set 16 \
  --chr 1-16 \
  --set-missing-snp-ids @:#[Amel4-5] \
  --out ${DUMP}/vcfs/plink/${FILE} \
  --make-bed

# Before running ADMIXTURE first remove SNPs in high LD
${PLINK}/plink --bfile ${DUMP}/vcfs/plink/${FILE} \
  --allow-no-sex \
  --allow-extra-chr \
  --chr-set 16 \
  --chr 1-16 \
  --set-missing-snp-ids @:#[Amel4-5] \
  --out ${DUMP}/vcfs/plink/${FILE} \
  --indep-pairwise 50 10 0.1
${PLINK}/plink --bfile ${DUMP}/vcfs/plink/${FILE} \
  --allow-no-sex \
  --allow-extra-chr \
  --geno 0.05 \
  --maf 0.1 \
  --chr-set 16 \
  --chr 1-16 \
  --set-missing-snp-ids @:#[Amel4-5] \
  --out ${DUMP}/vcfs/plink/${FILE}-prune \
  --extract ${DUMP}/vcfs/plink/${FILE}.prune.in \
  --bp-space 5000 \
  --make-bed
# bp-space retains only 1 SNP from a pair closer than the given bp
# (Harpur et al used 25K random SNPs at least 5 kb apart)
# (Wallberg used all 8M)

# Check fraction missing per sample (update to check before or after pruning)
${PLINK}/plink --bfile ${DUMP}/vcfs/plink/${FILE}-prune \
  --allow-no-sex \
  --allow-extra-chr \
  --chr-set 16 \
  --chr 1-16 \
  --set-missing-snp-ids @:#[Amel4-5] \
  --out ${DUMP}/vcfs/plink/${FILE} \
  --missing


# =============================================================================
# ADMIXTURE
# =============================================================================

# Runs ADMIXTURE for several K values (1 to K)
# The lowest cross validation (CV) error rate is the optimal K
# Input format is plink
# ADMIXTURE outputs file for:
#  Q (ancestry fractions)
#  P (allele frequencies of inferred ancestral populations)
S=1 # Min K
K=8 # Max K
N=1 # Number of bootstraps
# Check the -i file is correct (pruned or not) before running
qsub -q unlimitq -l mem=4G -l h_vmem=48G -pe parallel_smp 4 \
    -o ${DUMP}/logs \
    -e ${DUMP}/logs \
    ${PIPE}/admixture.sh -i ${DUMP}/vcfs/plink/${FILE}-prune \
      -s ${S} -k ${K} -n ${N} -o ${DUMP}/vcfs/admixture
# Identify optimal K
grep -h CV ${DUMP}/vcfs/admixture/admixture-CV-*.out
# Copy fam file to same folder incase needed for plotting
cp ${DUMP}/vcfs/plink/${FILE}-prune.fam ${DUMP}/vcfs/admixture


# =============================================================================
# Plink: Clustering/MDS
# =============================================================================

${PLINK}/plink --bfile ${DUMP}/vcfs/plink/${FILE} \
  --allow-no-sex \
  --allow-extra-chr \
  --chr-set 17 \
  --chr 1-17 \
  --set-missing-snp-ids @:#[Amel4-5] \
  --extract ${DUMP}/vcfs/plink/${FILE}.prune.in \
  --cluster \
  --mds-plot 3



# =============================================================================
# Plink: Heterozygosity
# =============================================================================

# Update target pop file
pop="1"
echo ${pop} > ${DUMP}/vcfs/target.pop 

# Run per population separately
${PLINK}/plink --bfile ${DUMP}/vcfs/plink/${FILE} \
  --fam ${FILE}.fam \
  --allow-no-sex \
  --allow-extra-chr \
  --chr-set 17 \
  --chr 1-16 \
  --set-missing-snp-ids @:#[Amel4-5] \
  --keep-fam ${DUMP}/vcfs/target.pop \
  --het \
  --extract ${DUMP}/vcfs/plink/${FILE}.prune.in \
  --out ${DUMP}/vcfs/plink/${FILE}
rm ${DUMP}/vcfs/plink/${FILE}.nosex
rm ${DUMP}/vcfs/plink/${FILE}.log

# ibs
${PLINK}/plink --bfile ${DUMP}/vcfs/plink/${FILE} \
  --fam ${FILE}.fam \
  --allow-no-sex \
  --allow-extra-chr \
  --chr-set 17 \
  --chr 1-16 \
  --set-missing-snp-ids @:#[Amel4-5] \
  --distance ibs \
  --extract ${DUMP}/vcfs/plink/${FILE}.prune.in \
  --out ${DUMP}/vcfs/plink/${FILE}
rm ${DUMP}/vcfs/plink/${FILE}.nosex
rm ${DUMP}/vcfs/plink/${FILE}.log



# =============================================================================
# Prep non-LD pruned file for LD analysis, BayeScan, hapFLK
# =============================================================================

${PLINK}/plink --vcf ${FILEDIR}/${FILE}.vcf \
  --fam ${FILE}.fam \
  --allow-no-sex \
  --allow-extra-chr \
  --chr-set 17 \
  --chr 1-17 \
  --set-missing-snp-ids @:#[Amel4-5] \
  --geno 0.5 \
  --make-bed \
  --out ${DUMP}/vcfs/plink/${FILE}



# =============================================================================
# Linkage disequilibrium, per chromosome to reduce file size
# =============================================================================

# Generate list of 5K SNPs per chromosome to ensure each population is
# analysed using same set of SNPs
mkdir -p ${DUMP}/vcfs/ld-snps
for i in {1..16}
do
  ${PLINK}/plink --bfile ${DUMP}/vcfs/plink/${FILE} \
    --fam ${FILE}.fam \
    --allow-no-sex \
    --allow-extra-chr \
    --chr-set 17 \
    --chr ${i} \
    --thin-count 5000 \
    --set-missing-snp-ids @:#[Amel4-5] \
    --write-snplist \
    --out ${DUMP}/vcfs/ld-snps/r2-snps-${i}
done
rm ${DUMP}/vcfs/ld-snps/r2-*.nosex
rm ${DUMP}/vcfs/ld-snps/r2-*.log

# Update target pop file
pop="1"
echo ${pop} > ${DUMP}/vcfs/target.pop 

# For each population, calculate r2 for the subset of SNPs
mkdir -p ${DUMP}/vcfs/ld
for i in {1..16}
do
  ${PLINK}/plink --bfile ${FILE}-Sel \
    --fam ${FILE}.fam \
    --allow-no-sex \
    --allow-extra-chr \
    --chr-set 17 \
    --chr ${i} \
    --set-missing-snp-ids @:#[Amel4-5] \
    --extract ${DUMP}/vcfs/ld-snps/r2-snps-${i}.snplist \
    --r2 \
    --ld-window 99999 \
    --ld-window-r2 0 \
    --ld-window-kb 1000 \
    --keep-fam ${DUMP}/vcfs/target.pop \
    --out ${DUMP}/vcfs/ld/${pop}-r2-${i}
done
rm ${DUMP}/vcfs/ld/${pop}-r2-*.nosex
rm ${DUMP}/vcfs/ld/${pop}-r2-*.log

# Followed by R script to summarise results: r2LD.R



# =============================================================================
# BayeScan, have to run per chromosome due to file sizes
# =============================================================================

# The script below has some built-in settings which can only be modified by
# opening the script in an editor. These include for instance --geno 0.5 in
# Plink, thinning the variant set by removing one SNP from each pair within
# 500 bp, and a chromosome set of 17 for use with Apis mellifera data.

# This was running but has been cancelled because it takes an exceedingly long
# time to run. Will consider returning to this at some point in the future if
# available cluster time permits.

# Run BAYESCAN (on cluster!)
#mkdir -p ${DUMP}/bayes
#cd ${DUMP}/bayes
#qsub -q unlimitq -l mem=4G -l h_vmem=200G -pe parallel_smp 1 \
#    -o ${DUMP}/logs \
#    -e ${DUMP}/logs \
#    ${PIPE}/bayescan.sh \
#      -i ${FILE}-Sel \
#      -o ${DUMP}/bayes \
#      -c 17 \
#      -s ${DUMP}/vcfs/ped2bayes.spid \
#      -f ${FILE}.fam

# Followed by interpretation of the results



# =============================================================================
# hapFLK
# =============================================================================
DUMP="/home/dwragg/work/Analysis"
PIPE="/home/dwragg/work/Pipeline"
FILE=${DUMP}/vcfs/EurBee

# Run HAPFLK (on cluster!)
qsub -q unlimitq -l mem=4G -l h_vmem=200G -pe parallel_smp 4 \
    -o ${DUMP}/logs \
    -e ${DUMP}/logs \
    ${PIPE}/hapflk.sh \
      -i ${FILE}-Sel \
      -o ${DUMP}/hapflk \
      -c 13 \
      -k 5




# =============================================================================
# R - Selection 
#	- pooled heterozygosity approach (as per Rubin et al in chicken)
# =============================================================================

# Performs test for signature of selection using pooled heterozygosity in
# sliding windows along a chromosome.

# Rec-cap on parameters
DUMP="/home/dwragg/work/Analysis"
PIPE="/home/dwragg/work/Pipeline"
PLINK="/usr/local/bioinfo/src/plink/plink-1.90-x86_64"
FILE=${DUMP}/vcfs/EurBee

# Update target pop file
pop="2"
echo ${pop} > ${DUMP}/vcfs/target.pop 

# Loop through each autosome and create files for R script
mkdir -p ${DUMP}/selection/${pop}/logs
cd ${DUMP}/selection/${pop}
for i in {1..17}
do
  # Create input file containing only chr of interest
  ${PLINK}/plink --bfile ${FILE}-Sel \
    --allow-no-sex \
    --allow-extra-chr \
    --chr-set 17 \
    --chr ${i} \
    --set-missing-snp-ids @:#[Amel4-5] \
    --geno 0.5 \
    --recode 12 \
    --fam ${FILE}.fam \
    --keep-fam ${DUMP}/vcfs/target.pop \
    --out ${DUMP}/selection/${pop}/${i}
  # Remove genetic distance from map file
  cut -f1,2,4 ${DUMP}/selection/${pop}/${i}.map > \
    ${DUMP}/selection/${pop}/${i}-R.map
  rm ${DUMP}/selection/${pop}/${i}.log
  rm ${DUMP}/selection/${pop}/${i}.nosex
  rm ${DUMP}/selection/${pop}/${i}.map
done

# Loop through each autosome and run pooled het script
for i in {1..17}
do
  # Run pooled heterozygosity script
  qsub -q unlimitq -l mem=4G -l h_vmem=32G -pe parallel_smp 1 \
      -o ${DUMP}/selection/${pop}/logs \
      -e ${DUMP}/selection/${pop}/logs \
      ${PIPE}/selection.sh \
        -i ${DUMP}/vcfs \
        -p ${DUMP}/selection/${pop}/${i}.ped \
        -m ${DUMP}/selection/${pop}/${i}-R.map \
        -h ${DUMP}/vcfs/EurBee-bayes.pheno \
        -c ${i} \
        -w 160000 \
        -o ${DUMP}/selection/${pop} \
	-x 0.25
done

# Remove obsolete files, and merge results
# Only run once above iterations completed!
# Make sure filename correct for *.txt because R sometimes using
# scientific notation for large values (window sizes)
pop="2"
echo ${pop} > ${DUMP}/vcfs/target.pop 
rename -160000 -160k ${DUMP}/selection/${pop}/*
rm ${DUMP}/selection/${pop}/logs/*
for i in {1..17}
do
  # Remvoe obsolte files
  rm ${DUMP}/selection/${pop}/${i}.ped
  rm ${DUMP}/selection/${pop}/${i}-R.map
  rm ${DUMP}/selection/${pop}/gen${i}

  # Merge results
  cd ${DUMP}/selection/${pop}/
  # Ensure -name is correct
  find . -name "*-160k.txt" | xargs -n 1 tail -n +2 | \
    cut -f 2- > ${DUMP}/selection/${pop}/Hp.body
  # ensure file name is correct
  head --l 1 ${DUMP}/selection/${pop}/*chr1-*-160k.txt > \
    ${DUMP}/selection/${pop}/Hp.head
  cat ${DUMP}/selection/${pop}/Hp.head ${DUMP}/selection/${pop}/Hp.body > \
    ${DUMP}/selection/${pop}-Hp.out
  rm ${DUMP}/selection/${pop}/Hp.head
  rm ${DUMP}/selection/${pop}/Hp.body
done



# =============================================================================
# R - Selection 
#	- windowed Fst between populations
# =============================================================================

# Performs test for signature of selection by calculating Fst and Josts' D in
# sliding windows along a chromosome.

# Rec-cap on parameters
DUMP="/home/dwragg/work/Analysis"
PIPE="/home/dwragg/work/Pipeline"
PLINK="/usr/local/bioinfo/src/plink/plink-1.90-x86_64"
FILE=${DUMP}/vcfs/EurBee

pop="fst"
# Loop through each autosome and create files for R script
mkdir -p ${DUMP}/selection/${pop}/logs
cd ${DUMP}/selection/${pop}
for i in {1..17}
do
  # Create input file containing only chr of interest
  ${PLINK}/plink --bfile ${FILE}-Sel \
    --allow-no-sex \
    --allow-extra-chr \
    --chr-set 17 \
    --chr ${i} \
    --set-missing-snp-ids @:#[Amel4-5] \
    --geno 0.5 \
    --recode 12 \
    --out ${DUMP}/selection/${pop}/${i}
  # Remove genetic distance from map file
  cut -f1,2,4 ${DUMP}/selection/${pop}/${i}.map > \
    ${DUMP}/selection/${pop}/${i}-R.map
  rm ${DUMP}/selection/${pop}/${i}.log
  rm ${DUMP}/selection/${pop}/${i}.nosex
  rm ${DUMP}/selection/${pop}/${i}.map
done

# Loop through each autosome and run winFst script
for i in {1..17}
do
  # Run pooled heterozygosity script
  qsub -q unlimitq -l mem=4G -l h_vmem=32G -pe parallel_smp 1 \
      -o ${DUMP}/selection/${pop}/logs \
      -e ${DUMP}/selection/${pop}/logs \
      ${PIPE}/winfst.sh \
        -i ${DUMP}/vcfs \
        -p ${DUMP}/selection/${pop}/${i}.ped \
        -m ${DUMP}/selection/${pop}/${i}-R.map \
        -h ${DUMP}/vcfs/EurBee-bayes.pheno \
        -c ${i} \
        -w 140000 \
        -o ${DUMP}/selection/${pop} \
	-x 0.25
done

# Remove obsolete files, and merge results
# Only run once above iterations completed!
rename -140000 -140k ${DUMP}/selection/${pop}/*
for i in {1..17}
do
  # Remvoe obsolte files
#  rm ${DUMP}/selection/${pop}/${i}.ped
#  rm ${DUMP}/selection/${pop}/${i}-R.map
  rm ${DUMP}/selection/${pop}/gen${i}

  # Merge results
  cd ${DUMP}/selection/${pop}/
  find . -name "*-140k.txt" | xargs -n 1 tail -n +2 | \
    cut -f 2- > ${DUMP}/selection/${pop}/Fst.body
  head --l 1 ${DUMP}/selection/${pop}/*chr1-*-140k.txt > \
    ${DUMP}/selection/${pop}/Fst.head
  cat ${DUMP}/selection/${pop}/Fst.head ${DUMP}/selection/${pop}/Fst.body > \
    ${DUMP}/selection/Fst.out
  rm ${DUMP}/selection/${pop}/Fst.head
  rm ${DUMP}/selection/${pop}/Fst.body
done




# =============================================================================
# SnpEff
#	- Summary genes in candidate regions
# =============================================================================

# See snpEff.sh







# =============================================================================
# Make use of orthoDB
# =============================================================================

# 1) FIrst process Fst-$.out file in Rstudio to generate list of hits:
#	Filters: biomart region file (region format is Chr:Start:Stop)
#	Attributes: Gene stable ID, Chr, Gene start, Gene end
#	Save file as TSV (unique results only) rename $.martExport
# 2) Copy $.martExport to genotoul and use R match to Drosophila orthologs:

setwd("/work/dwragg/Analysis/orthoDB")
#fname <- "Fst-10k-25step.out.martExport"
fname <- "1-Hp-100k-25step.out.martExport"
#fname <- "2-Hp-100k-25step.out.martExport"

# Read in Biomart TSV export (Gene ID, Chr, Start, End)
dat <- read.table(fname, header=T, sep="\t", stringsAsFactors=F)
names(dat) <- c("Amel_Gene_ID", "Chr", "Start", "End")

# Read in orthologs database
orths <- read.table("orthologs.txt", header=T, stringsAsFactors=F)
AMEL <- read.table("AMEL.txt", header=T, stringsAsFactors=F)
DROS <- read.table("DROS.txt", header=T, stringsAsFactors=F)

# Identify matches in ortholog table (using Amel Gene ID)
tmp.orths <- orths[which(orths$Amel_Gene_ID %in% dat$Amel_Gene_ID),]
tmp.orths <- tmp.orths[,c(2,1)]

# Recover matches from AMEL table that were not present in orthologs table
tmp.AMEL <- AMEL[which(AMEL$Amel_Gene_ID %in% dat$Gene.stable.ID),]
tmp.AMEL <- tmp.AMEL[which(tmp.AMEL$Dros_Gene_ID %in% tmp.orths$Dros_Gene_ID == F),]
tmp.AMEL <- tmp.AMEL[,c(16,13)]

# Combine the two tables
orthologs <- rbind(tmp.orths, tmp.AMEL)
orthologs <- orthologs[!duplicated(orthologs),]
orthologs <- merge(dat, orthologs, by = "Amel_Gene_ID", all=T)

# Extract genes
dros.genes <- orthologs[which(is.na(orthologs$Dros_Gene_ID)==F),]$Dros_Gene_ID

# Write to file
tname <- paste(fname, ".dros", sep="")
write.table(dros.genes,tname, append=F, quote=F, sep="\t", row.names=F, col.names=F)
tname <- paste(fname, ".orths", sep="")
write.table(orthologs, tname, append=F, quote=F, sep="\t", row.names=F, col.names=F)

# Dros gene list can now be analyzed in g:PRofiler/REViGO/DAVID


# =============================================================================
# Ensembl Variant Effect Predictor
# =============================================================================

# SO terms: http://www.ensembl.org/info/genome/variation/predicted_data.html#consequences
# 1) Run this for each population independently
# 2) And for the hits from the Fst/Hp analyses
DUMP="/home/dwragg/work/Analysis"
PIPE="/home/dwragg/work/Pipeline"

# Subst VCF on sample IDs and non-reference alleles (private)
OTH=('FL1_AGTCAA_L004' 'FL2_AGTTCC_L004' 'FL3_ATGTCA_L004' 'FL7_CCGTCC_L004' 'FL8_GTTTCG_L007' 'FL9_GTCCGC_L004' 'FL11_GTGAAA_L004' 'FL12_CGTACG_L007' 'FL13_GTGGCC_L004' 'FL15_GTTTCG_L004' 'NM1_ATCACG_L007' 'NM2_CTTGTA_L004' 'NM3_CGATGT_L007' 'NM4_TTAGGC_L007' 'NM5_GGCTAC_L004' 'NM6_TGACCA_L007' 'NM7_ACAGTG_L007' 'NM8_GCCAAT_L007' 'NM9_CAGATC_L007' 'NM21_ACTTGA_L007' 'NM25_GATCAG_L007' 'NM26_TAGCTT_L007' 'NM28_GGCTAC_L007' 'NM29_CTTGTA_L007'  'PM1_AGTCAA_L007' 'XC1_AGTTCC_L007' 'XC3_ATGTCA_L007' 'XC4_CCGTCC_L007' 'XC5_GTCCGC_L007' 'XC9_GTGAAA_L007')
JFM=('JFM1_ATCACG_L001' 'JFM2_CGATGT_L001' 'JFM3_TTAGGC_L001' 'JFM4_TGACCA_L001' 'JFM5_ACAGTG_L001' 'JFM6_GCCAAT_L001' 'JFM7_CAGATC_L001' 'JFM8' 'JFM9_GATCAG_L001'
'JFM10_TAGCTT_L001' 'JFM11' 'JFM12_CTTGTA_L001' 'JFM13_AGTCAA_L001' 'JFM14_AGTTCC_L001' 'JFM15_ATGTCA_L001' 'JFM16_CCGTCC_L001' 'JFM17_GTCCGC_L001' 'JFM18_GTGAAA_L001' 'JFM19_GTGGCC_L001' 'JFM20_GTTTCG_L001' 'JFM21_ATCACG_L004' 'JFM22_CGATGT_L004' 'JFM23_TTAGGC_L004' 'JFM24_TGACCA_L004' 'JFM25_ACAGTG_L004' 'JFM26_GCCAAT_L004' 'JFM28_CAGATC_L004' 'JFM29_ACTTGA_L004' 'JFM31_GATCAG_L004' 'JFM33_TAGCTT_L004')
POP="OTH"
printf "%s\n" ${OTH[@]} > ${DUMP}/vcfs/JFM-OTH-Apis/${POP}.samples

# Regions list captures chromosomes 1-16 + mt
module load bioinfo/bcftools
bcftools view --types snps -M 2 -O v --private \
  --regions 'NC_007070.3','NC_007071.3','NC_007072.3','NC_007073.3','NC_007074.3',\
'NC_007075.3','NC_007076.3','NC_007077.3','NC_007078.3','NC_007079.3',\
'NC_007080.3','NC_007081.3','NC_007082.3','NC_007083.3','NC_007084.3',\
'NC_007085.3','NC_001566.1' \
  -S ${DUMP}/vcfs/JFM-OTH-Apis/${POP}.samples \
  -o ${DUMP}/vcfs/JFM-OTH-Apis/${POP}.vcf \
  JFM-OTH-BR-Apis.vcf.gz

# Convert NCBI accession numbers to Ensembl chromosome numbers
cp ${DUMP}/vcfs/JFM-OTH-Apis/${POP}.vcf ${DUMP}/vcfs/JFM-OTH-Apis/${POP}-ensembl.vcf
${PIPE}/vcfaccession-to-chr.sh -i ${DUMP}/vcfs/JFM-OTH-Apis/${POP}-ensembl.vcf

# Run VEP (on cluster!)
qsub -q unlimitq -l mem=4G -l h_vmem=16G -pe parallel_smp 1 \
    -o ${DUMP}/vcfs/JFM-OTH-Apis \
    -e ${DUMP}/vcfs/JFM-OTH-Apis \
    ${PIPE}/vep.sh \
      -i ${DUMP}/vcfs/JFM-OTH-Apis/${POP}-ensembl.vcf \
      -o ${DUMP}/vcfs/JFM-OTH-Apis/${POP}



# =============================================================================
# Gene Ontology software
# =============================================================================

# Functional annotation clustering:
# 1) DAVID bioinformatics suite
# 2) gProfiler
# 3) REVIGO









# =============================================================================
# BreakDancer (http://gmt.genome.wustl.edu/breakdancer/current/)
# =============================================================================
BDANCE="/usr/local/bioinfo/src/BreakDancer/current/cpp"
BAM2CFG="/usr/local/bioinfo/src/BreakDancer/current/perl"

# Requires histogram module installing for Perl
# CPAN, install GD/Graph/histogram.pm

# Merge population-specific BAMs and co-ordinate sort the output
module load bioinfo/Java7
POP=(${DUMP}/bams/pop2/*.bam)
FILE=${DUMP}/bams/OTH.bams
for ((i=0;i<${#POP[@]};i++));
do
  if [[ $i = 0 ]]
    then printf "${POP[$i]}\n" > "${FILE}"
  fi
  if [[ $i > 0 ]]
    then printf "${POP[$i]}\n" >> "${FILE}"
  fi
done

# Merge using samtools, sort and index
qsub -q unlimitq -l mem=4G -l h_vmem=32G -pe parallel_smp 4 \
    -o ${DUMP}/logs \
    -e ${DUMP}/logs \
    ${PIPE}/mergeBAMs-v2.sh \
      -n OTH \
      -b ${DUMP}/bams/OTH.bams \
      -o ${DUMP}/bams






BAM1=${DUMP}/bams/JFM.bam
BAM2=${DUMP}/bams/OTH.bam
OUT=${DUMP}/breakdancer

# Create config file from the BAM files
perl ${BAM2CFG} -g -h \
  ${DUMP}/bams/JFM.bam \
  ${DUMP}/bams/OTH.bam \
  > ${DUMP}/breakdancer/JFM-OTH.cfg

# Run BreakDancer
${BDANCE}/breakdancer-max -q 20 -o 7 -d \
  ${DUMP}/breakdancer/JFM-OTH.ctx \
  ${DUMP}/breakdancer/JFM-OTH.cfg \
  ${OUT}/JFM-OTH.ctx





